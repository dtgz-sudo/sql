<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
        xmlns="http://www.springframework.org/schema/security"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 以下页面不被拦截 -->
    <http pattern="/login.html" security="none"></http>
    <http pattern="/login_error.html" security="none"></http>
    <http pattern="/Login_files/**" security="none"></http>
    <http pattern="/js/**" security="none"></http>
    <http pattern="/plugins/**" security="none"></http>

    <!-- 页面拦截规则，先配置不使用SPEL表达式
        不适用spel表达式 不能使用  hasAnyRole()方法
    -->
    <http use-expressions="false">
        <!--拦截所有的请求，要求必须先登录，并且登录成功的用户必须具有管理员的权限-->
        <intercept-url pattern="/**" access="ROLE_ADMIN"/>
        <!--拦截的具体规则-->
        <!--
                       login-page= 登录的地址
                        login-processing-url="/login"   form表单提交的请求路径，登录的入口
                       default-target-url=登录成功调整页面
                       authentication-failure-url=登陆失败
                        always-use-default-target="true"  使用默认页面
        />-->
        <!--        配置登录-->
        <form-login
                login-page="/login.html"
                login-processing-url="/loginBySpringSecurity"
                default-target-url="/personalAnalysis.jsp"
                authentication-failure-url="/login.html"
                always-use-default-target="true"/>

        <!--        配置注销

         logout-url="/logout" 点击注销请求的路径
         logout-success-url 注销成功之后访问的页面
         -->
        <logout logout-url="/logout" logout-success-url="/login.html"/>
        <!--关闭跨域攻击-->
        <csrf disabled="true"/>

    </http>


<!--    加密方式-->
    <beans:bean id="encoding" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">

    </beans:bean>
    <!-- 认真管理器 从数据库中查询用户并且赋予权限
         使用明文加密 没有使用md5加密
        -->

    <authentication-manager>
        <authentication-provider user-service-ref="userTeacherImpl">
<!--            制定加密方式为BCryptPasswordEncoder-->
            <password-encoder ref="encoding"></password-encoder>

        </authentication-provider>

    </authentication-manager>

</beans:beans>
